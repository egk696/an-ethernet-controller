// See README.md for license details.

package ethcontroller.protocols

object EthernetTesting {

  val mockupPTPEthFrameDHCP = new EthernetFrame {
    override val preamble: Array[Byte] = EthernetUtils.toBytes(0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xD5)
    override val dstMac: Array[Byte] = EthernetUtils.toBytes(0xff, 0xff, 0xff, 0xff, 0xff, 0xff)
    override val srcMac: Array[Byte] = EthernetUtils.toBytes(0x80, 0xce, 0x62, 0xd8, 0xc7, 0x39)
    override val ethType: Array[Byte] = EthernetUtils.toBytes(0x08, 0x00)
    override val ipHeader: Array[Byte] = EthernetUtils.toBytes(0x45, 0x10, 0x01, 0x48, 0x00, 0x00, 0x00, 0x00,
      0x80, 0x11, 0x39, 0x96, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff)
    override val udpHeader: Array[Byte] = EthernetUtils.toBytes(0x00, 0x44, 0x00, 0x43, 0x01, 0x34, 0x5c, 0xec)
    //Should be ignored
    override val ptpHeader: Array[Byte] = EthernetUtils.toBytes(PTP_FOLLOW_UP_TYPE, 0x02, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xE4, 0xAF, 0xA1, 0x30,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x55,
      0x00, 0x00)
    override val ptpBody: Array[Byte] = EthernetUtils.toBytes(0x54, 0x32, 0x11, 0x11, 0x55, 0x55, 0xAA, 0xAA)
    override val ptpSuffix: Array[Byte] = EthernetUtils.toBytes(0x00)
    override val fcs: Array[Byte] = EthernetUtils.toBytes(0x00)
    override val igp: Array[Byte] = EthernetUtils.toBytes(0x00)
  }

  val mockupPTPVLANFrameOverIpUDP = new EthernetFrame {
    override val preamble: Array[Byte] = EthernetUtils.toBytes(0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xD5)
    override val dstMac: Array[Byte] = EthernetUtils.toBytes(0x01, 0x00, 0x5E, 0x00, 0x01, 0x81)
    override val srcMac: Array[Byte] = EthernetUtils.toBytes(0x01, 0x00, 0x5E, 0x00, 0x01, 0x81)
    override val ethType: Array[Byte] = EthernetUtils.toBytes(0x81, 0x00, 0x01, 0x11, 0x08, 0x00)
    override val ipHeader: Array[Byte] = EthernetUtils.toBytes(0x45, 0x00, 0x00, 0x48, 0x00, 0x5D, 0x40, 0x00,
      0x01, 0x11, 0x29, 0x68, 0xC0, 0xA8, 0x01, 0x01,
      0xE0, 0x00, 0x01, 0x81)
    override val udpHeader: Array[Byte] = EthernetUtils.toBytes(0x01, 0x3F, 0x01, 0x3F, 0x00, 0x34, 0x00, 0x00)
    override val ptpHeader: Array[Byte] = EthernetUtils.toBytes(PTP_FOLLOW_UP_TYPE, 0x02, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xE4, 0xAF, 0xA1, 0x30,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x55,
      0x00, 0x00)
    override val ptpBody: Array[Byte] = EthernetUtils.toBytes(0x54, 0x32, 0x11, 0x11, 0x55, 0x55, 0xAA, 0xAA)
    override val ptpSuffix: Array[Byte] = EthernetUtils.toBytes(0x00)
    override val fcs: Array[Byte] = EthernetUtils.toBytes(0x00)
    override val igp: Array[Byte] = EthernetUtils.toBytes(0x00)
  }

  val mockupPTPEthFrameOverIpUDP = new EthernetFrame {
    override val preamble: Array[Byte] = EthernetUtils.toBytes(0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xD5)
    override val dstMac: Array[Byte] = EthernetUtils.toBytes(0x01, 0x00, 0x5E, 0x00, 0x01, 0x81)
    override val srcMac: Array[Byte] = EthernetUtils.toBytes(0x01, 0x00, 0x5E, 0x00, 0x01, 0x81)
    override val ethType: Array[Byte] = EthernetUtils.toBytes(0x08, 0x00)
    override val ipHeader: Array[Byte] = EthernetUtils.toBytes(0x45, 0x00, 0x00, 0x48, 0x00, 0x5D, 0x40, 0x00,
      0x01, 0x11, 0x29, 0x68, 0xC0, 0xA8, 0x01, 0x01,
      0xE0, 0x00, 0x01, 0x81)
    override val udpHeader: Array[Byte] = EthernetUtils.toBytes(0x01, 0x3F, 0x01, 0x3F, 0x00, 0x34, 0x00, 0x00)
    override val ptpHeader: Array[Byte] = EthernetUtils.toBytes(PTP_FOLLOW_UP_TYPE, 0x02, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xE4, 0xAF, 0xA1, 0x30,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x55,
      0x00, 0x00)
    override val ptpBody: Array[Byte] = EthernetUtils.toBytes(0x54, 0x32, 0x11, 0x11, 0x55, 0x55, 0xAA, 0xAA)
    override val ptpSuffix: Array[Byte] = EthernetUtils.toBytes(0x00)
    override val fcs: Array[Byte] = EthernetUtils.toBytes(0x00)
    override val igp: Array[Byte] = EthernetUtils.toBytes(0x00)
  }

}